#!/bin/bash

# Disable silent errors and prevents errors from being masked
set -uo pipefail

### Install needed packages
pacman -Sy --noconfirm pacman-contrib dialog

### Setup Dialog
cat > ~/.dialogrc <<EOT
aspect = 0
separate_widget = ""
tab_len = 0
visit_items = OFF
use_shadow = OFF
use_colors = ON
screen_color = (WHITE,DEFAULT,OFF)
shadow_color = (WHITE,BLACK,OFF)
dialog_color = (WHITE,BLACK,OFF)
title_color = (GREEN,BLACK,OFF)
border_color = (WHITE,BLACK,OFF)
border2_color = (WHITE,BLACK,OFF)
button_active_color = (BLACK,YELLOW,OFF)
button_inactive_color = (WHITE,BLACK,OFF)
button_key_active_color = (BLACK,GREEN,OFF)
button_key_inactive_color = (RED,BLACK,OFF)
button_label_active_color = (BLACK,YELLOW,OFF)
button_label_inactive_color = (WHITE,BLACK,OFF)
inputbox_color = (WHITE,BLACK,OFF)
inputbox_border_color = (BLACK,BLACK,OFF)
searchbox_color = (WHITE,BLACK,OFF)
searchbox_title_color = (GREEN,BLACK,OFF)
searchbox_border_color = (WHITE,BLACK,OFF)
position_indicator_color = (GREEN,BLACK,OFF)
menubox_color = (BLACK,BLACK,OFF)
menubox_border_color = (BLACK,BLACK,OFF)
menubox_border2_color = (BLACK,BLACK,OFF)
item_color = (WHITE,BLACK,OFF)
item_selected_color = (BLACK,GREEN,OFF)
tag_color = (BLUE,BLACK,OFF)
tag_selected_color = (BLACK,GREEN,OFF)
tag_key_color = (YELLOW,BLACK,OFF)
tag_key_selected_color = (BLACK,GREEN,OFF)
check_color = (WHITE,BLACK,OFF)
check_selected_color = (BLACK,GREEN,OFF)
uarrow_color = (GREEN,BLACK,OFF)
darrow_color = (GREEN,BLACK,OFF)
itemhelp_color = (BLACK,WHITE,OFF)
form_active_text_color = (BLACK,BLUE,OFF)
form_text_color = (WHITE,BLACK,OFF)
form_item_readonly_color = (BLACK,WHITE,OFF)
EOT

### Welcome screen
WELCOME=$(dialog --stdout --title "Arch installer" --msgbox "\

Hi,

Welcome in the Arch Linux Installer.
This script will help you installing Arch Linux.

-----------------------------------------------------
 It will erase all of your data on the selected disk
-----------------------------------------------------

@seplu, 2024" 20 57)
clear

### Get information from user
## User
USER=$(dialog --stdout --inputbox "Enter username" 0 0) || exit 1
clear
: ${USER:?"User cannot be empty"}

## Password
PASSWORD=$(dialog --stdout --passwordbox "Enter user password" 0 0) || exit 1
clear
: ${PASSWORD:?"password cannot be empty"}
PASSWORD2=$(dialog --stdout --passwordbox "Enter admin password again" 0 0) || exit 1
clear
[[ "$PASSWORD" == "$PASSWORD2" ]] || ( echo "Passwords did not match"; exit 1; )

### Root Password
ROOTPWD=$(dialog --stdout --passwordbox "Enter Root Password" 0 0)
clear

## Hostname
HOSTNAME=$(dialog --stdout --inputbox "Enter hostname" 0 0) || exit 1
clear
: ${HOSTNAME:?"hostname cannot be empty"}

## Target disk
DISKLIST=$(lsblk -dplnx size -o name,size | grep -Ev "boot|rpmb|loop" | tac)
TARGETDISK=$(dialog --stdout --menu "Select target disk" 0 0 0 ${DISKLIST}) || exit 1
clear

## Full-disk encryption
FDED=$(dialog --stdout --yesno "Enable Full-Disk Encyption - LVM on Luks?" 0 0)
FDESTATUS=$?
if [ $FDESTATUS = 0 ]
then
FDE="yes"
else
FDE="no"
fi
clear

### Crypt Password
CRYPTPWD=$(dialog --stdout --passwordbox "Enter Crypt Password" 0 0)
clear

## ROOT Size


## Swap
TOTALMEM=$(free -k | awk '/:/ {print $2}' | head -n 1)
if [ $TOTALMEM -lt 2048555 ]
then
SWAPCALC=$(((totalmem * 2)/1024))
elif [[ $TOTALMEM -gt 2048555 && $TOTALMEM -lt 8194206 ]]
then
SWAPCALC=$(($TOTALMEM / 1024))
else
SWAPCALC=8192
fi
SWAP=$(dialog --stdout --inputbox "Enter Swap size" 0 0 ${SWAPCALC}) || exit 1
clear

### Print summary from user
echo "------------"
echo "Information:"
echo "User: $USER"
echo "Hostname: $HOSTNAME"
echo "Target disk: $TARGETDISK"
echo "Full-Disk Encryption: $FDE"
echo "SWAP Calculation: $SWAPCALC"
echo "SWAP: $SWAP"

### Logging
exec 1> >(tee "stdout.log")
exec 2> >(tee "stderr.log")

timedatectl set-ntp true

### Setup disk
sgdisk -og "${TARGETDISK}"
sgdisk -n 1:2048:4095 -c 1:"BIOS Boot Partition" -t 1:ef02 "${TARGETDISK}"
sgdisk -n 2:4096:+550M -c 2:"EFI System Partition" -t 2:ef00 "${TARGETDISK}"
ENDSECTOR=$(sgdisk -E "${TARGETDISK}")
sgdisk -n 3:0:"$ENDSECTOR" -c 3:"Linux LVM" -t 3:8309 "${TARGETDISK}"
echo "SGDISK DONE"

### Full-Disk Encryption
echo "${CRYPTPWD}" | cryptsetup luksFormat -q --type luks1 --use-random -S 1 -s 512 -h sha512 -i 5000 ${TARGETDISK}p3
echo "${CRYPTPWD}" | cryptsetup open ${TARGETDISK}p3 cryptlvm
pvcreate /dev/mapper/cryptlvm
vgcreate vg /dev/mapper/cryptlvm

lvcreate -L ${SWAP}M vg -n swap
lvcreate -L 100G vg -n root
lvcreate -l 100%FREE vg -n home

### Formatting
mkfs.ext4 /dev/vg/root
mkfs.ext4 /dev/vg/home
mkswap /dev/vg/swap

mount /dev/vg/root /mnt
mkdir /mnt/home
mount /dev/vg/home /mnt/home
swapon /dev/vg/swap

mkfs.fat -F32 ${TARGETDISK}p2
mkdir /mnt/efi
mount ${TARGETDISK}p2 /mnt/efi

### Installation
pacstrap -K /mnt base linux linux-firmware mkinitcpio lvm2 nano dhcpcd wpa_supplicant

genfstab -U /mnt >> /mnt/etc/fstab

echo "ARCH-CHROOT"
#arch-chroot /mnt /bin/bash <<END
echo "localtime"
arch-chroot /mnt /bin/bash <<END
ln -sf /usr/share/zoneinfo/Europe/Warsaw /etc/localtime
END
echo "hwclock"
arch-chroot /mnt /bin/bash <<END
hwclock --systohc
END
echo "Locale"
arch-chroot /mnt /bin/bash <<END
cp /etc/locale.gen /etc/locale.gen.ori
END
echo "Locale 2"
arch-chroot /mnt /bin/bash <<END
sed -i '/#en_US.UTF-8/s/^#//g' /etc/locale.gen
END
echo "Locale gen"
arch-chroot /mnt /bin/bash <<END
locale-gen
END
echo "Hostname"
arch-chroot /mnt /bin/bash <<END
echo ${HOSTNAME} > /etc/hostname
END
echo "mkinit bck"
arch-chroot /mnt /bin/bash <<END
cp /etc/mkinitcpio.conf /etc/mkinitcpio.conf.bck
END
echo "mkinit hooks"
arch-chroot /mnt /bin/bash <<END
sed -i "s|^HOOKS=.*|HOOKS=(base udev autodetect keyboard modconf block encrypt lvm2 filesystems fsck)|g" /etc/mkinitcpio.conf
END
echo "mkinit files"
arch-chroot /mnt /bin/bash <<END
sed -i "s|^FILES=.*|FILES=(/root/secrets/crypto_keyfile.bin)|g" /etc/mkinitcpio.conf
END
echo "Root pwd"
arch-chroot /mnt /bin/bash <<END
echo -en "${ROOTPWD}\n${ROOTPWD}" | passwd
END
echo "Grub installation"
arch-chroot /mnt /bin/bash <<END
echo y | pacman -Sy grub
END
echo "Grub bck"
arch-chroot /mnt /bin/bash <<END
cp /etc/default/grub /etc/default/grub.bck
END
echo "Grub Enable Crypto"
arch-chroot /mnt /bin/bash <<END
sed -i '/GRUB_ENABLE_CRYPTODISK/s/^#//g' /etc/default/grub
END
echo "Grub CMD"
BLKID=$(blkid | grep p3 | cut -d '"' -f 2)
GRUBCMD="\"cryptdevice=UUID=$BLKID:cryptlvm root=/dev/vg/root cryptkey=rootfs:/root/secrets/crypto_keyfile.bin random.trust_cpu=on\""
arch-chroot /mnt /bin/bash <<END
sed -i "s|^GRUB_CMDLINE_LINUX=.*|GRUB_CMDLINE_LINUX=${GRUBCMD}|g" /etc/default/grub
END
echo "EfiBootMGR Install"
arch-chroot /mnt /bin/bash <<END
echo y | pacman -Sy efibootmgr
END
echo "Grub install EFI"
arch-chroot /mnt /bin/bash <<END
grub-install --target=x86_64-efi --efi-directory=/efi
END
echo "Intel UCode"
arch-chroot /mnt /bin/bash <<END
echo y | pacman -Sy intel-ucode
END
echo "Secrets"
arch-chroot /mnt /bin/bash <<END
mkdir /root/secrets && chmod 700 /root/secrets
END
echo "KeyFile"
arch-chroot /mnt /bin/bash <<END
head -c 64 /dev/urandom > /root/secrets/crypto_keyfile.bin && chmod 600 /root/secrets/crypto_keyfile.bin
END
echo "AddKey"
arch-chroot /mnt /bin/bash <<END
cryptsetup -v luksAddKey -i 1 /dev/nvme0n1p3 /root/secrets/crypto_keyfile.bin
END
echo "mkinit linux"
arch-chroot /mnt /bin/bash <<END
mkinitcpio -p linux
END
echo "grub mkconfig"
arch-chroot /mnt /bin/bash <<END
grub-mkconfig -o /boot/grub/grub.cfg
END
echo "CHROOT DONE"
exit

### Cleanup
rm ~/.dialogrc

echo "DONE"
